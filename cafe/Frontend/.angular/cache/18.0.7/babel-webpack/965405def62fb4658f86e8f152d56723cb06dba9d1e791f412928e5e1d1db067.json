{"ast":null,"code":"import { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Directive, ElementRef, Renderer2, NgModule, SkipSelf } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { filter, finalize } from 'rxjs/operators';\nimport { NavigationStart, NavigationEnd, NavigationCancel, NavigationError, Router } from '@angular/router';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Available spinner types\n */\nvar SPINNER = /*#__PURE__*/function (SPINNER) {\n  SPINNER[\"ballScaleMultiple\"] = \"ball-scale-multiple\";\n  SPINNER[\"ballSpin\"] = \"ball-spin\";\n  SPINNER[\"ballSpinClockwise\"] = \"ball-spin-clockwise\";\n  SPINNER[\"ballSpinClockwiseFadeRotating\"] = \"ball-spin-clockwise-fade-rotating\";\n  SPINNER[\"ballSpinFadeRotating\"] = \"ball-spin-fade-rotating\";\n  SPINNER[\"chasingDots\"] = \"chasing-dots\";\n  SPINNER[\"circle\"] = \"circle\";\n  SPINNER[\"cubeGrid\"] = \"cube-grid\";\n  SPINNER[\"doubleBounce\"] = \"double-bounce\";\n  SPINNER[\"fadingCircle\"] = \"fading-circle\";\n  SPINNER[\"foldingCube\"] = \"folding-cube\";\n  SPINNER[\"pulse\"] = \"pulse\";\n  SPINNER[\"rectangleBounce\"] = \"rectangle-bounce\";\n  SPINNER[\"rectangleBounceParty\"] = \"rectangle-bounce-party\";\n  SPINNER[\"rectangleBouncePulseOut\"] = \"rectangle-bounce-pulse-out\";\n  SPINNER[\"rectangleBouncePulseOutRapid\"] = \"rectangle-bounce-pulse-out-rapid\";\n  SPINNER[\"rotatingPlane\"] = \"rotating-plane\";\n  SPINNER[\"squareJellyBox\"] = \"square-jelly-box\";\n  SPINNER[\"squareLoader\"] = \"square-loader\";\n  SPINNER[\"threeBounce\"] = \"three-bounce\";\n  SPINNER[\"threeStrings\"] = \"three-strings\";\n  SPINNER[\"wanderingCubes\"] = \"wandering-cubes\";\n  return SPINNER;\n}(SPINNER || {});\n/**\n * Available postions\n */\nvar POSITION = /*#__PURE__*/function (POSITION) {\n  POSITION[\"bottomCenter\"] = \"bottom-center\";\n  POSITION[\"bottomLeft\"] = \"bottom-left\";\n  POSITION[\"bottomRight\"] = \"bottom-right\";\n  POSITION[\"centerCenter\"] = \"center-center\";\n  POSITION[\"centerLeft\"] = \"center-left\";\n  POSITION[\"centerRight\"] = \"center-right\";\n  POSITION[\"topCenter\"] = \"top-center\";\n  POSITION[\"topLeft\"] = \"top-left\";\n  POSITION[\"topRight\"] = \"top-right\";\n  return POSITION;\n}(POSITION || {});\n/**\n * Progress bar directions\n */\nvar PB_DIRECTION = /*#__PURE__*/function (PB_DIRECTION) {\n  PB_DIRECTION[\"leftToRight\"] = \"ltr\";\n  PB_DIRECTION[\"rightToLeft\"] = \"rtl\";\n  return PB_DIRECTION;\n}(PB_DIRECTION || {});\n/**\n * The default value of foreground task id\n */\nconst DEFAULT_FG_TASK_ID = 'fg-default';\n/**\n * The default value of background task id\n */\nconst DEFAULT_BG_TASK_ID = 'bg-default';\n/**\n * The default value of loader id\n */\nconst DEFAULT_MASTER_LOADER_ID = 'master';\nconst DEFAULT_TIME = {};\nconst MIN_DELAY = 0;\nconst MIN_TIME = 0;\nconst CLOSING_TIME = 1001;\nconst FAST_CLOSING_TIME = 601;\nconst BACKGROUND = false;\nconst FOREGROUND = true;\nconst OVERLAY_DISAPPEAR_TIME = 500;\nconst FAST_OVERLAY_DISAPPEAR_TIME = 300;\n/**\n * Http loader taskId\n */\nconst HTTP_LOADER_TASK_ID = '$_http-loader';\n/**\n * Router loader taskId\n */\nconst ROUTER_LOADER_TASK_ID = '$_router_loader';\n/**\n * The configuration of spinners\n */\nconst SPINNER_CONFIG = {\n  'ball-scale-multiple': {\n    divs: 3,\n    class: 'sk-ball-scale-multiple'\n  },\n  'ball-spin': {\n    divs: 8,\n    class: 'sk-ball-spin'\n  },\n  'ball-spin-clockwise': {\n    divs: 8,\n    class: 'sk-ball-spin-clockwise'\n  },\n  'ball-spin-clockwise-fade-rotating': {\n    divs: 8,\n    class: 'sk-ball-spin-clockwise-fade-rotating'\n  },\n  'ball-spin-fade-rotating': {\n    divs: 8,\n    class: 'sk-ball-spin-fade-rotating'\n  },\n  'chasing-dots': {\n    divs: 2,\n    class: 'sk-chasing-dots'\n  },\n  circle: {\n    divs: 12,\n    class: 'sk-circle'\n  },\n  'cube-grid': {\n    divs: 9,\n    class: 'sk-cube-grid'\n  },\n  'double-bounce': {\n    divs: 2,\n    class: 'sk-double-bounce'\n  },\n  'fading-circle': {\n    divs: 12,\n    class: 'sk-fading-circle'\n  },\n  'folding-cube': {\n    divs: 4,\n    class: 'sk-folding-cube'\n  },\n  pulse: {\n    divs: 1,\n    class: 'sk-pulse'\n  },\n  'rectangle-bounce': {\n    divs: 5,\n    class: 'sk-rectangle-bounce'\n  },\n  'rectangle-bounce-party': {\n    divs: 5,\n    class: 'sk-rectangle-bounce-party'\n  },\n  'rectangle-bounce-pulse-out': {\n    divs: 5,\n    class: 'sk-rectangle-bounce-pulse-out'\n  },\n  'rectangle-bounce-pulse-out-rapid': {\n    divs: 5,\n    class: 'sk-rectangle-bounce-pulse-out-rapid'\n  },\n  'rotating-plane': {\n    divs: 1,\n    class: 'sk-rotating-plane'\n  },\n  'square-jelly-box': {\n    divs: 2,\n    class: 'sk-square-jelly-box'\n  },\n  'square-loader': {\n    divs: 1,\n    class: 'sk-square-loader'\n  },\n  'three-bounce': {\n    divs: 3,\n    class: 'sk-three-bounce'\n  },\n  'three-strings': {\n    divs: 3,\n    class: 'sk-three-strings'\n  },\n  'wandering-cubes': {\n    divs: 2,\n    class: 'sk-wandering-cubes'\n  }\n};\n/**\n * The default configuration of ngx-ui-loader\n */\nconst DEFAULT_CONFIG = {\n  bgsColor: '#00ACC1',\n  bgsOpacity: 0.5,\n  bgsPosition: POSITION.bottomRight,\n  bgsSize: 60,\n  bgsType: SPINNER.ballSpinClockwise,\n  blur: 5,\n  delay: 0,\n  fastFadeOut: false,\n  fgsColor: '#00ACC1',\n  fgsPosition: POSITION.centerCenter,\n  fgsSize: 60,\n  fgsType: SPINNER.ballSpinClockwise,\n  gap: 24,\n  logoPosition: POSITION.centerCenter,\n  logoSize: 120,\n  logoUrl: '',\n  masterLoaderId: DEFAULT_MASTER_LOADER_ID,\n  overlayBorderRadius: '0',\n  overlayColor: 'rgba(40, 40, 40, 0.8)',\n  pbColor: '#00ACC1',\n  pbDirection: PB_DIRECTION.leftToRight,\n  pbThickness: 3,\n  hasProgressBar: true,\n  text: '',\n  textColor: '#FFFFFF',\n  textPosition: POSITION.centerCenter,\n  maxTime: -1,\n  minTime: 300\n};\n\n/**\n * Injection token for ngx-ui-loader configuration\n */\nconst NGX_UI_LOADER_CONFIG_TOKEN = new InjectionToken('ngxUiLoaderCustom.config');\nlet NgxUiLoaderService = /*#__PURE__*/(() => {\n  class NgxUiLoaderService {\n    /**\n     * Constructor\n     */\n    constructor(config) {\n      this.config = config;\n      this.defaultConfig = Object.assign({}, DEFAULT_CONFIG);\n      if (this.config) {\n        if (this.config.minTime && this.config.minTime < MIN_TIME) {\n          this.config.minTime = MIN_TIME;\n        }\n        this.defaultConfig = Object.assign(Object.assign({}, this.defaultConfig), this.config);\n      }\n      this.loaders = {};\n      this.showForeground = new BehaviorSubject({\n        loaderId: '',\n        isShow: false\n      });\n      this.showForeground$ = this.showForeground.asObservable();\n      this.showBackground = new BehaviorSubject({\n        loaderId: '',\n        isShow: false\n      });\n      this.showBackground$ = this.showBackground.asObservable();\n      this.fgClosing = new BehaviorSubject({\n        loaderId: '',\n        isShow: false\n      });\n      this.foregroundClosing$ = this.fgClosing.asObservable();\n      this.bgClosing = new BehaviorSubject({\n        loaderId: '',\n        isShow: false\n      });\n      this.backgroundClosing$ = this.bgClosing.asObservable();\n    }\n    /**\n     * For internal use only.\n     *\n     * @docs-private\n     */\n    bindLoaderData(loaderId) {\n      const isMaster = loaderId === this.defaultConfig.masterLoaderId;\n      if (this.loaders[loaderId]) {\n        if (this.loaders[loaderId].isBound) {\n          throw new Error(`[ngx-ui-loader] - loaderId \"${loaderId}\" is duplicated.`);\n        }\n        this.loaders[loaderId].isBound = true;\n        this.loaders[loaderId].isMaster = isMaster;\n        // emit showEvent after data loader is bound\n        if (this.hasRunningTask(FOREGROUND, loaderId)) {\n          this.showForeground.next({\n            loaderId,\n            isShow: true\n          });\n        } else {\n          if (this.hasRunningTask(BACKGROUND, loaderId)) {\n            this.showBackground.next({\n              loaderId,\n              isShow: true\n            });\n          }\n        }\n      } else {\n        this.createLoaderData(loaderId, isMaster, true);\n      }\n    }\n    /**\n     * For internal use only.\n     *\n     * @docs-private\n     */\n    destroyLoaderData(loaderId) {\n      this.stopAllLoader(loaderId);\n      delete this.loaders[loaderId];\n    }\n    /**\n     * Get default loader configuration\n     *\n     * @returns default configuration object\n     */\n    getDefaultConfig() {\n      return Object.assign({}, this.defaultConfig);\n    }\n    /**\n     * Get all the loaders\n     */\n    getLoaders() {\n      return JSON.parse(JSON.stringify(this.loaders));\n    }\n    /**\n     * Get data of a specified loader. If loaderId is not provided, it will return data of\n     * master loader(if existed). Otherwise null is returned.\n     */\n    getLoader(loaderId) {\n      loaderId = loaderId ? loaderId : this.defaultConfig.masterLoaderId;\n      if (this.loaders[loaderId]) {\n        return JSON.parse(JSON.stringify(this.loaders[loaderId]));\n      }\n      return null;\n    }\n    /**\n     * Start the foreground loading of loader having `loaderId` with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopLoader() method.\n     *\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id of the loading. taskId is set to 'fd-default' by default.\n     */\n    startLoader(loaderId, taskId = DEFAULT_FG_TASK_ID, time) {\n      if (!this.readyToStart(loaderId, taskId, true, time)) {\n        return;\n      }\n      if (!this.loaders[loaderId].tasks[taskId].isOtherRunning) {\n        // no other foreground task running\n        if (this.hasRunningTask(BACKGROUND, loaderId)) {\n          this.backgroundCloseout(loaderId);\n          this.showBackground.next({\n            loaderId,\n            isShow: false\n          });\n        }\n        this.showForeground.next({\n          loaderId,\n          isShow: true\n        });\n      }\n    }\n    /**\n     * Start the foreground loading of master loader with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stop() method.\n     * NOTE: Really this function just wraps startLoader() function\n     *\n     * @param taskId the optional task Id of the loading. taskId is set to 'fd-default' by default.\n     */\n    start(taskId = DEFAULT_FG_TASK_ID, time) {\n      this.startLoader(this.defaultConfig.masterLoaderId, taskId, time);\n    }\n    /**\n     * Start the background loading of loader having `loaderId` with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopLoaderBackground() method.\n     *\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id of the loading. taskId is set to 'bg-default' by default.\n     */\n    startBackgroundLoader(loaderId, taskId = DEFAULT_BG_TASK_ID, time) {\n      if (!this.readyToStart(loaderId, taskId, false, time)) {\n        return;\n      }\n      if (!this.hasRunningTask(FOREGROUND, loaderId) && !this.loaders[loaderId].tasks[taskId].isOtherRunning) {\n        this.showBackground.next({\n          loaderId,\n          isShow: true\n        });\n      }\n    }\n    /**\n     * Start the background loading of master loader with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopBackground() method.\n     * NOTE: Really this function just wraps startBackgroundLoader() function\n     *\n     * @param taskId the optional task Id of the loading. taskId is set to 'bg-default' by default.\n     */\n    startBackground(taskId = DEFAULT_BG_TASK_ID, time) {\n      this.startBackgroundLoader(this.defaultConfig.masterLoaderId, taskId, time);\n    }\n    /**\n     * Stop a foreground loading of loader having `loaderId` with specific `taskId`\n     *\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id to stop. If not provided, 'fg-default' is used.\n     * @returns Object\n     */\n    stopLoader(loaderId, taskId = DEFAULT_FG_TASK_ID) {\n      if (!this.readyToStop(loaderId, taskId)) {\n        return;\n      }\n      if (!this.hasRunningTask(FOREGROUND, loaderId)) {\n        this.foregroundCloseout(loaderId);\n        this.showForeground.next({\n          loaderId,\n          isShow: false\n        });\n        if (this.hasRunningTask(BACKGROUND, loaderId)) {\n          setTimeout(() => {\n            if (this.hasRunningTask(BACKGROUND, loaderId)) {\n              // still have background tasks\n              this.showBackground.next({\n                loaderId,\n                isShow: true\n              });\n            }\n          }, this.defaultConfig.fastFadeOut ? FAST_OVERLAY_DISAPPEAR_TIME : OVERLAY_DISAPPEAR_TIME);\n        }\n      }\n    }\n    /**\n     * Stop a foreground loading of master loader with specific `taskId`\n     *\n     * @param taskId the optional task Id to stop. If not provided, 'fg-default' is used.\n     * @returns Object\n     */\n    stop(taskId = DEFAULT_FG_TASK_ID) {\n      this.stopLoader(this.defaultConfig.masterLoaderId, taskId);\n    }\n    /**\n     * Stop a background loading of loader having `loaderId` with specific `taskId`\n     *\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id to stop. If not provided, 'bg-default' is used.\n     * @returns Object\n     */\n    stopBackgroundLoader(loaderId, taskId = DEFAULT_BG_TASK_ID) {\n      if (!this.readyToStop(loaderId, taskId)) {\n        return;\n      }\n      if (!this.hasRunningTask(FOREGROUND, loaderId) && !this.hasRunningTask(BACKGROUND, loaderId)) {\n        this.backgroundCloseout(loaderId);\n        this.showBackground.next({\n          loaderId,\n          isShow: false\n        });\n      }\n    }\n    /**\n     * Stop a background loading of master loader with specific taskId\n     *\n     * @param taskId the optional task Id to stop. If not provided, 'bg-default' is used.\n     * @returns Object\n     */\n    stopBackground(taskId = DEFAULT_BG_TASK_ID) {\n      this.stopBackgroundLoader(this.defaultConfig.masterLoaderId, taskId);\n    }\n    /**\n     * Stop all the background and foreground loadings of loader having `loaderId`\n     *\n     * @param loaderId the loader Id\n     */\n    stopAllLoader(loaderId) {\n      if (!this.loaders[loaderId]) {\n        console.warn(`[ngx-ui-loader] - loaderId \"${loaderId}\" does not exist.`);\n        return;\n      }\n      if (this.hasRunningTask(FOREGROUND, loaderId)) {\n        this.foregroundCloseout(loaderId);\n        this.showForeground.next({\n          loaderId,\n          isShow: false\n        });\n      } else if (this.hasRunningTask(BACKGROUND, loaderId)) {\n        this.backgroundCloseout(loaderId);\n        this.showBackground.next({\n          loaderId,\n          isShow: false\n        });\n      }\n      this.clearAllTimers(this.loaders[loaderId].tasks);\n      this.loaders[loaderId].tasks = {};\n    }\n    /**\n     * Stop all the background and foreground loadings of master loader\n     */\n    stopAll() {\n      this.stopAllLoader(this.defaultConfig.masterLoaderId);\n    }\n    /**\n     * Check whether the specified loader has a running task with the given `taskId`.\n     * If no `taskId` specified, it will check whether the loader has any running tasks.\n     * For internal use only.\n     *\n     * @docs-private\n     * @param isForeground foreground task or background task\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id\n     * @returns boolean\n     */\n    hasRunningTask(isForeground, loaderId, taskId) {\n      if (this.loaders[loaderId]) {\n        const tasks = this.loaders[loaderId].tasks;\n        if (taskId) {\n          return tasks[taskId] ? tasks[taskId].startAt ? true : false : false;\n        }\n        return Object.keys(tasks).some(id => !!tasks[id].startAt && tasks[id].isForeground === isForeground);\n      }\n      return false;\n    }\n    /**\n     * Create loader data if it does not exist\n     *\n     * @docs-private\n     */\n    createLoaderData(loaderId, isMaster, isBound) {\n      if (!this.loaders[loaderId]) {\n        this.loaders[loaderId] = {\n          loaderId,\n          tasks: {},\n          isMaster,\n          isBound\n        };\n      }\n    }\n    /**\n     * Manage to close foreground loading\n     *\n     * @docs-private\n     * @param loaderId the loader id\n     */\n    foregroundCloseout(loaderId) {\n      this.fgClosing.next({\n        loaderId,\n        isShow: true\n      });\n      setTimeout(() => {\n        this.fgClosing.next({\n          loaderId,\n          isShow: false\n        });\n      }, this.defaultConfig.fastFadeOut ? FAST_CLOSING_TIME : CLOSING_TIME);\n    }\n    /**\n     * Manage to close background loading\n     *\n     * @docs-private\n     * @param loaderId the loader id\n     */\n    backgroundCloseout(loaderId) {\n      this.bgClosing.next({\n        loaderId,\n        isShow: true\n      });\n      setTimeout(() => {\n        this.bgClosing.next({\n          loaderId,\n          isShow: false\n        });\n      }, this.defaultConfig.fastFadeOut ? FAST_CLOSING_TIME : CLOSING_TIME);\n    }\n    /**\n     * Clear all timers of the given task\n     *\n     * @docs-private\n     */\n    clearTimers(task) {\n      clearTimeout(task.delayTimer);\n      clearTimeout(task.maxTimer);\n      clearTimeout(task.minTimer);\n    }\n    /**\n     * Clear all timers of the given tasks\n     *\n     * @docs-private\n     */\n    clearAllTimers(tasks) {\n      Object.keys(tasks).map(id => {\n        this.clearTimers(tasks[id]);\n      });\n    }\n    /**\n     * @docs-private\n     */\n    readyToStart(loaderId, taskId, isForeground, time = DEFAULT_TIME) {\n      this.createLoaderData(loaderId, undefined, false);\n      const isOtherRunning = this.hasRunningTask(isForeground, loaderId);\n      if (!this.loaders[loaderId].tasks[taskId]) {\n        this.loaders[loaderId].tasks[taskId] = {\n          taskId,\n          isForeground,\n          minTime: time.minTime >= MIN_TIME ? time.minTime : this.defaultConfig.minTime,\n          maxTime: time.maxTime ? time.maxTime : this.defaultConfig.maxTime,\n          delay: time.delay >= MIN_DELAY ? time.delay : this.defaultConfig.delay\n        };\n      } else {\n        if (this.loaders[loaderId].tasks[taskId].isForeground !== isForeground) {\n          throw new Error(`[ngx-ui-loader] - taskId \"${taskId}\" is duplicated.`);\n        }\n      }\n      if (this.setDelayTimer(this.loaders[loaderId].tasks[taskId], loaderId)) {\n        return false;\n      }\n      this.loaders[loaderId].tasks[taskId] = Object.assign(Object.assign({}, this.loaders[loaderId].tasks[taskId]), {\n        isOtherRunning,\n        startAt: Date.now()\n      });\n      this.setMaxTimer(this.loaders[loaderId].tasks[taskId], loaderId);\n      if (!this.loaders[loaderId].isBound) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * @docs-private\n     */\n    readyToStop(loaderId, taskId) {\n      if (!this.loaders[loaderId]) {\n        console.warn(`[ngx-ui-loader] - loaderId \"${loaderId}\" does not exist.`);\n        return false;\n      }\n      const task = this.loaders[loaderId].tasks[taskId];\n      if (!task) {\n        return false;\n      }\n      if (task.isDelayed) {\n        this.clearTimers(task);\n        delete this.loaders[loaderId].tasks[taskId];\n        return false;\n      }\n      if (this.setMinTimer(task, loaderId)) {\n        return false;\n      }\n      this.clearTimers(task);\n      delete this.loaders[loaderId].tasks[taskId];\n      return true;\n    }\n    /**\n     * Set delay timer, if `delay` > 0\n     *\n     * @docs-private\n     * @returns boolean\n     */\n    setDelayTimer(task, loaderId) {\n      if (task.delay > MIN_DELAY) {\n        if (task.isDelayed) {\n          return true;\n        }\n        if (!task.delayTimer) {\n          task.isDelayed = true;\n          task.delayTimer = setTimeout(() => {\n            task.isDelayed = false;\n            if (task.isForeground) {\n              this.startLoader(loaderId, task.taskId);\n            } else {\n              this.startBackgroundLoader(loaderId, task.taskId);\n            }\n          }, task.delay);\n          return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * Set maxTimer if `maxTime` > `minTime`\n     *\n     * @docs-private\n     * @returns boolean\n     */\n    setMaxTimer(task, loaderId) {\n      if (task.maxTime > task.minTime) {\n        // restart the task, reset maxTimer\n        clearTimeout(task.maxTimer);\n        task.maxTimer = setTimeout(() => {\n          if (task.isForeground) {\n            this.stopLoader(loaderId, task.taskId);\n          } else {\n            this.stopBackgroundLoader(loaderId, task.taskId);\n          }\n        }, task.maxTime);\n      }\n    }\n    /**\n     * Set minTimer if `startAt` + `minTime` > `Date.now()`\n     *\n     * @docs-private\n     * @returns boolean\n     */\n    setMinTimer(task, loaderId) {\n      const now = Date.now();\n      if (task.startAt) {\n        if (task.startAt + task.minTime > now) {\n          task.minTimer = setTimeout(() => {\n            if (task.isForeground) {\n              this.stopLoader(loaderId, task.taskId);\n            } else {\n              this.stopBackgroundLoader(loaderId, task.taskId);\n            }\n          }, task.startAt + task.minTime - now);\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n  NgxUiLoaderService.ɵprov = ɵɵdefineInjectable({\n    factory: function NgxUiLoaderService_Factory() {\n      return new NgxUiLoaderService(ɵɵinject(NGX_UI_LOADER_CONFIG_TOKEN, 8));\n    },\n    token: NgxUiLoaderService,\n    providedIn: \"root\"\n  });\n  return NgxUiLoaderService;\n})();\n/* eslint-disable @angular-eslint/component-selector */\nclass NgxUiLoaderComponent {\n  /**\n   * Constructor\n   */\n  constructor(domSanitizer, changeDetectorRef, ngxService) {\n    this.domSanitizer = domSanitizer;\n    this.changeDetectorRef = changeDetectorRef;\n    this.ngxService = ngxService;\n    this.initialized = false;\n    this.defaultConfig = this.ngxService.getDefaultConfig();\n    this.bgsColor = this.defaultConfig.bgsColor;\n    this.bgsOpacity = this.defaultConfig.bgsOpacity;\n    this.bgsPosition = this.defaultConfig.bgsPosition;\n    this.bgsSize = this.defaultConfig.bgsSize;\n    this.bgsType = this.defaultConfig.bgsType;\n    this.fastFadeOut = this.defaultConfig.fastFadeOut;\n    this.fgsColor = this.defaultConfig.fgsColor;\n    this.fgsPosition = this.defaultConfig.fgsPosition;\n    this.fgsSize = this.defaultConfig.fgsSize;\n    this.fgsType = this.defaultConfig.fgsType;\n    this.gap = this.defaultConfig.gap;\n    this.loaderId = this.defaultConfig.masterLoaderId;\n    this.logoPosition = this.defaultConfig.logoPosition;\n    this.logoSize = this.defaultConfig.logoSize;\n    this.logoUrl = this.defaultConfig.logoUrl;\n    this.overlayBorderRadius = this.defaultConfig.overlayBorderRadius;\n    this.overlayColor = this.defaultConfig.overlayColor;\n    this.pbColor = this.defaultConfig.pbColor;\n    this.pbDirection = this.defaultConfig.pbDirection;\n    this.pbThickness = this.defaultConfig.pbThickness;\n    this.hasProgressBar = this.defaultConfig.hasProgressBar;\n    this.text = this.defaultConfig.text;\n    this.textColor = this.defaultConfig.textColor;\n    this.textPosition = this.defaultConfig.textPosition;\n  }\n  /**\n   * On init event\n   */\n  ngOnInit() {\n    this.initializeSpinners();\n    this.ngxService.bindLoaderData(this.loaderId);\n    this.determinePositions();\n    this.trustedLogoUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.logoUrl);\n    this.showForegroundWatcher = this.ngxService.showForeground$.pipe(filter(showEvent => this.loaderId === showEvent.loaderId)).subscribe(data => {\n      this.showForeground = data.isShow;\n      this.changeDetectorRef.markForCheck();\n    });\n    this.showBackgroundWatcher = this.ngxService.showBackground$.pipe(filter(showEvent => this.loaderId === showEvent.loaderId)).subscribe(data => {\n      this.showBackground = data.isShow;\n      this.changeDetectorRef.markForCheck();\n    });\n    this.foregroundClosingWatcher = this.ngxService.foregroundClosing$.pipe(filter(showEvent => this.loaderId === showEvent.loaderId)).subscribe(data => {\n      this.foregroundClosing = data.isShow;\n      this.changeDetectorRef.markForCheck();\n    });\n    this.backgroundClosingWatcher = this.ngxService.backgroundClosing$.pipe(filter(showEvent => this.loaderId === showEvent.loaderId)).subscribe(data => {\n      this.backgroundClosing = data.isShow;\n      this.changeDetectorRef.markForCheck();\n    });\n    this.initialized = true;\n  }\n  /**\n   * On changes event\n   */\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      return;\n    }\n    const bgsTypeChange = changes.bgsType;\n    const fgsTypeChange = changes.fgsType;\n    const logoUrlChange = changes.logoUrl;\n    if (fgsTypeChange || bgsTypeChange) {\n      this.initializeSpinners();\n    }\n    this.determinePositions();\n    if (logoUrlChange) {\n      this.trustedLogoUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.logoUrl);\n    }\n  }\n  /**\n   * On destroy event\n   */\n  ngOnDestroy() {\n    this.ngxService.destroyLoaderData(this.loaderId);\n    if (this.showForegroundWatcher) {\n      this.showForegroundWatcher.unsubscribe();\n    }\n    if (this.showBackgroundWatcher) {\n      this.showBackgroundWatcher.unsubscribe();\n    }\n    if (this.foregroundClosingWatcher) {\n      this.foregroundClosingWatcher.unsubscribe();\n    }\n    if (this.backgroundClosingWatcher) {\n      this.backgroundClosingWatcher.unsubscribe();\n    }\n  }\n  /**\n   * Initialize spinners\n   */\n  initializeSpinners() {\n    this.fgDivs = Array(SPINNER_CONFIG[this.fgsType].divs).fill(1);\n    this.fgSpinnerClass = SPINNER_CONFIG[this.fgsType].class;\n    this.bgDivs = Array(SPINNER_CONFIG[this.bgsType].divs).fill(1);\n    this.bgSpinnerClass = SPINNER_CONFIG[this.bgsType].class;\n  }\n  /**\n   * Determine the positions of spinner, logo and text\n   */\n  determinePositions() {\n    this.logoTop = 'initial';\n    this.spinnerTop = 'initial';\n    this.textTop = 'initial';\n    const textSize = 24;\n    if (this.logoPosition.startsWith('center')) {\n      this.logoTop = '50%';\n    } else if (this.logoPosition.startsWith('top')) {\n      this.logoTop = '30px';\n    }\n    if (this.fgsPosition.startsWith('center')) {\n      this.spinnerTop = '50%';\n    } else if (this.fgsPosition.startsWith('top')) {\n      this.spinnerTop = '30px';\n    }\n    if (this.textPosition.startsWith('center')) {\n      this.textTop = '50%';\n    } else if (this.textPosition.startsWith('top')) {\n      this.textTop = '30px';\n    }\n    if (this.fgsPosition === POSITION.centerCenter) {\n      if (this.logoUrl && this.logoPosition === POSITION.centerCenter) {\n        if (this.text && this.textPosition === POSITION.centerCenter) {\n          // logo, spinner and text\n          this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% - ${this.fgsSize / 2}px - ${textSize / 2}px - ${this.gap}px)`);\n          this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.logoSize / 2}px - ${textSize / 2}px)`);\n          this.textTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.logoSize / 2}px + ${this.gap}px + ${this.fgsSize / 2}px)`);\n        } else {\n          // logo and spinner\n          this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% - ${this.fgsSize / 2}px - ${this.gap / 2}px)`);\n          this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.logoSize / 2}px + ${this.gap / 2}px)`);\n        }\n      } else {\n        if (this.text && this.textPosition === POSITION.centerCenter) {\n          // spinner and text\n          this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% - ${textSize / 2}px - ${this.gap / 2}px)`);\n          this.textTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.fgsSize / 2}px + ${this.gap / 2}px)`);\n        }\n      }\n    } else {\n      if (this.logoUrl && this.logoPosition === POSITION.centerCenter && this.text && this.textPosition === POSITION.centerCenter) {\n        // logo and text\n        this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% - ${textSize / 2}px - ${this.gap / 2}px)`);\n        this.textTop = this.domSanitizer.bypassSecurityTrustStyle(`calc(50% + ${this.logoSize / 2}px + ${this.gap / 2}px)`);\n      }\n    }\n  }\n}\n/* eslint-disable @angular-eslint/directive-selector */\nclass NgxUiLoaderBlurredDirective {\n  constructor(elementRef, renderer, loader) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.loader = loader;\n    this.blur = this.loader.getDefaultConfig().blur;\n    this.loaderId = this.loader.getDefaultConfig().masterLoaderId;\n    this.fastFadeOut = this.loader.getDefaultConfig().fastFadeOut;\n  }\n  /**\n   * On Init event\n   */\n  ngOnInit() {\n    this.showForegroundWatcher = this.loader.showForeground$.pipe(filter(showEvent => this.loaderId === showEvent.loaderId)).subscribe(data => {\n      if (data.isShow) {\n        const filterValue = `blur(${this.blur}px)`;\n        this.renderer.setStyle(this.elementRef.nativeElement, '-webkit-filter', filterValue);\n        this.renderer.setStyle(this.elementRef.nativeElement, 'filter', filterValue);\n      } else {\n        setTimeout(() => {\n          if (!this.loader.hasRunningTask(FOREGROUND, data.loaderId)) {\n            this.renderer.setStyle(this.elementRef.nativeElement, '-webkit-filter', 'none');\n            this.renderer.setStyle(this.elementRef.nativeElement, 'filter', 'none');\n          }\n        }, this.fastFadeOut ? FAST_OVERLAY_DISAPPEAR_TIME : OVERLAY_DISAPPEAR_TIME);\n      }\n    });\n  }\n  /**\n   * On destroy event\n   */\n  ngOnDestroy() {\n    if (this.showForegroundWatcher) {\n      this.showForegroundWatcher.unsubscribe();\n    }\n  }\n}\nclass NgxUiLoaderModule {\n  /**\n   * forRoot\n   *\n   * @returns A module with its provider dependencies\n   */\n  static forRoot(ngxUiLoaderConfig) {\n    return {\n      ngModule: NgxUiLoaderModule,\n      providers: [{\n        provide: NGX_UI_LOADER_CONFIG_TOKEN,\n        useValue: ngxUiLoaderConfig\n      }]\n    };\n  }\n}\n/**\n * Injection token for ngx-ui-loader-router configuration\n */\nconst NGX_UI_LOADER_ROUTER_CONFIG_TOKEN = new InjectionToken('ngxUiLoaderRouterCustom.config');\nfunction getExcludeObj(config) {\n  let strs;\n  let regExps;\n  if (config) {\n    if (config.exclude) {\n      strs = config.exclude.map(url => url.toLowerCase());\n    }\n    if (config.excludeRegexp) {\n      regExps = config.excludeRegexp.map(regexp => new RegExp(regexp, 'i'));\n    }\n  }\n  return {\n    strs,\n    regExps\n  };\n}\nfunction isIgnored(url, excludeStrings, excludeRegexps) {\n  if (excludeStrings) {\n    // do not show the loader for urls in the `exclude` list\n    if (excludeStrings.findIndex(str => url.toLowerCase().startsWith(str)) !== -1) {\n      return true;\n    }\n  }\n  if (excludeRegexps) {\n    // do not show the loader for urls which matches regexps in the `excludeRegexp` list\n    if (excludeRegexps.findIndex(regexp => regexp.test(url)) !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\nclass NgxUiLoaderRouterModule {\n  /**\n   * Constructor\n   */\n  constructor(parentModule, customConfig, router, loader) {\n    if (parentModule) {\n      throw new Error('[ngx-ui-loader] - NgxUiLoaderRouterModule is already loaded. It should be imported in the root `AppModule` only!');\n    }\n    let config = {\n      loaderId: loader.getDefaultConfig().masterLoaderId,\n      showForeground: true\n    };\n    this.exclude = getExcludeObj(customConfig);\n    if (customConfig) {\n      config = Object.assign(Object.assign({}, config), customConfig);\n    }\n    router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        if (!isIgnored(event.url, this.exclude.strs, this.exclude.regExps)) {\n          if (config.showForeground) {\n            loader.startLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n          } else {\n            loader.startBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n          }\n        }\n      }\n      if (event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError) {\n        if (!isIgnored(event.url, this.exclude.strs, this.exclude.regExps)) {\n          if (config.showForeground) {\n            loader.stopLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n          } else {\n            loader.stopBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * forRoot\n   *\n   * @returns A module with its provider dependencies\n   */\n  static forRoot(routerConfig) {\n    return {\n      ngModule: NgxUiLoaderRouterModule,\n      providers: [{\n        provide: NGX_UI_LOADER_ROUTER_CONFIG_TOKEN,\n        useValue: routerConfig\n      }]\n    };\n  }\n}\n/**\n * Injection token for ngx-ui-loader-http configuration\n */\nconst NGX_UI_LOADER_HTTP_CONFIG_TOKEN = new InjectionToken('ngxUiLoaderHttpCustom.config');\nclass NgxUiLoaderHttpInterceptor {\n  /**\n   * Constructor\n   */\n  constructor(customConfig, loader) {\n    this.loader = loader;\n    this.count = 0;\n    this.config = {\n      loaderId: this.loader.getDefaultConfig().masterLoaderId,\n      showForeground: false\n    };\n    this.exclude = getExcludeObj(customConfig);\n    if (customConfig) {\n      this.config = Object.assign(Object.assign({}, this.config), customConfig);\n    }\n  }\n  intercept(req, next) {\n    if (isIgnored(req.url, this.exclude.strs, this.exclude.regExps)) {\n      return next.handle(req);\n    }\n    this.count++;\n    if (this.config.showForeground) {\n      this.loader.startLoader(this.config.loaderId, HTTP_LOADER_TASK_ID, this.config);\n    } else {\n      this.loader.startBackgroundLoader(this.config.loaderId, HTTP_LOADER_TASK_ID, this.config);\n    }\n    return next.handle(req).pipe(finalize(() => {\n      this.count--;\n      if (this.count === 0) {\n        if (this.config.showForeground) {\n          this.loader.stopLoader(this.config.loaderId, HTTP_LOADER_TASK_ID);\n        } else {\n          this.loader.stopBackgroundLoader(this.config.loaderId, HTTP_LOADER_TASK_ID);\n        }\n      }\n    }));\n  }\n}\nclass NgxUiLoaderHttpModule {\n  /**\n   * Constructor\n   */\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('[ngx-ui-loader] - NgxUiLoaderHttpModule is already loaded. It should be imported in the root `AppModule` only!');\n    }\n  }\n  /**\n   * forRoot\n   *\n   * @returns A module with its provider dependencies\n   */\n  static forRoot(httpConfig) {\n    return {\n      ngModule: NgxUiLoaderHttpModule,\n      providers: [{\n        provide: NGX_UI_LOADER_HTTP_CONFIG_TOKEN,\n        useValue: httpConfig\n      }]\n    };\n  }\n}\n/*\n * Public API Surface of ngx-ui-loader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxUiLoaderHttpModule, NgxUiLoaderModule, NgxUiLoaderRouterModule, NgxUiLoaderService, PB_DIRECTION, POSITION, SPINNER, NGX_UI_LOADER_CONFIG_TOKEN as ɵa, NgxUiLoaderComponent as ɵb, NgxUiLoaderBlurredDirective as ɵc, NGX_UI_LOADER_ROUTER_CONFIG_TOKEN as ɵd, NgxUiLoaderHttpInterceptor as ɵe, NGX_UI_LOADER_HTTP_CONFIG_TOKEN as ɵf };\n//# sourceMappingURL=ngx-ui-loader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}